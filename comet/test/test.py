#!/usr/bin/python

"""Test the current version of CoMEt against previous output
   we've shown to be correct."""

if __name__ == "__main__":
	# Load required modules
	import sys, os, json
        sys.path.append('../')
	import comet as C, run_comet as RC, run_exhaustive as RE

	# Hard-coded results of earlier runs
	trueMCMC = [["CDK4(A),CDKN2A(D),TP53 EGFR,PDGFRA(A),PTEN(D)", 36, 30.44954813369114], ["CDK4(A),CDKN2A(D),TP53 EGFR,PTEN,PTEN(D)", 47, 30.31560877273872], ["CDK4(A),CDKN2A(D),TP53 EGFR,PDGFRA(A),RB1(D)", 6, 28.487778643951266], ["CDK4(A),CDKN2A(D),TP53 PDGFRA(A),PTEN,PTEN(D)", 2, 27.986374758844306], ["CDK4(A),CDKN2A(D),TP53 EGFR,PTEN(D),RB1(D)", 1, 27.207736477342962], ["CDK4(A),CDKN2A(D),TP53 EGFR,MDM4(A),RB1(D)", 1, 26.9059191024149], ["CDK4(A),CDKN2A(D),RB1(D) EGFR,PDGFRA(A),PTEN(D)", 3, 26.35048099140887], ["CDK4(A),CDKN2A(D),RB1(D) EGFR,PTEN,PTEN(D)", 1, 26.216541630456447], ["CDK4(A),CDKN2A(D),TP53 MDM4(A),PTEN(D),RB1(D)", 1, 24.99799710738864], ["CDK4(A),CDKN2A(D),TP53 EGFR,MDM4(A),PTEN", 1, 24.910765737533954], ["CDK4(A),CDKN2A(D),TP53 PDGFRA(A),PTEN,RB1(D)", 1, 24.633365961904023]]
	trueExhaustive = [[["CDK4(A)", "CDKN2A(D)", "TP53"], 2.0501777722962307e-11, 24.610509515350707], [["CDK4(A)", "CDKN2A(D)", "RB1(D)"], 1.2359296795857692e-09, 20.511442373068434], [["CDKN2A(D)", "RB1(D)", "TP53"], 2.2622549583230077e-07, 15.301733565945451], [["CDKN2A(D)", "PDGFRA(A)", "TP53"], 5.832840327627481e-07, 14.354591577532437], [["CDK4(A)", "CDKN2A(D)", "PTEN(D)"], 6.628956984185713e-06, 11.924063083761265], [["CDKN2A(D)", "PTEN(D)", "TP53"], 6.758839562215416e-06, 11.904659345039246], [["CDK4(A)", "CDKN2A(D)", "EGFR"], 1.0188876503388554e-05, 11.494213971627723], [["CDKN2A(D)", "MDM4(A)", "TP53"], 2.29846746623337e-05, 10.68068288315328], [["CDK4(A)", "CDKN2A(D)", "MDM4(A)"], 4.215127253762239e-05, 10.074245683281216], [["CDKN2A(D)", "PTEN", "TP53"], 7.080437786804513e-05, 9.55558972488184], [["CDKN2A(D)", "EGFR", "TP53"], 0.00014664920525936723, 8.827467181857461], [["CDK4(A)", "CDKN2A(D)", "PTEN"], 0.00034655430464245547, 7.967471028259288], [["CDK4(A)", "CDKN2A(D)", "PDGFRA(A)"], 0.0004813554835065172, 7.638904509873084], [["EGFR", "PDGFRA(A)", "PTEN(D)"], 0.0029116404784502144, 5.839038618340434], [["EGFR", "PTEN", "PTEN(D)"], 0.0033289469461538768, 5.705099257388013], [["EGFR", "PDGFRA(A)", "RB1(D)"], 0.020707297003121482, 3.8772691286005605], [["CDK4(A)", "PTEN", "PTEN(D)"], 0.02470833935606165, 3.70061446657947], [["CDK4(A)", "EGFR", "RB1(D)"], 0.03290810019097256, 3.414036445102096], [["PDGFRA(A)", "PTEN", "PTEN(D)"], 0.03418852411237415, 3.375865243493599], [["CDK4(A)", "EGFR", "PTEN(D)"], 0.04910642117168333, 3.0137654753049254], [["PTEN", "PTEN(D)", "TP53"], 0.06360022407319667, 2.755138285478797], [["EGFR", "PTEN(D)", "RB1(D)"], 0.07447982750608903, 2.5972269619922557], [["EGFR", "PTEN(D)", "TP53"], 0.07453356912818032, 2.596505662758292], [["CDKN2A(D)", "EGFR", "RB1(D)"], 0.08983066126603602, 2.4098289224630283], [["MDM4(A)", "PTEN(D)", "TP53"], 0.09647852236806473, 2.338434861542759], [["EGFR", "MDM4(A)", "RB1(D)"], 0.1007201311558415, 2.2954095870641935], [["CDKN2A(D)", "EGFR", "PTEN"], 0.12616022263295645, 2.070202571641558], [["PTEN", "PTEN(D)", "RB1(D)"], 0.13518806853021575, 2.001088369783735], [["EGFR", "MDM4(A)", "PDGFRA(A)"], 0.151491132331082, 1.8872281882139106], [["CDK4(A)", "EGFR", "PDGFRA(A)"], 0.17146767045891065, 1.7633605405901391], [["EGFR", "MDM4(A)", "TP53"], 0.18850621007296692, 1.6686243279525612], [["MDM4(A)", "PTEN", "PTEN(D)"], 0.19338292645363564, 1.6430829808649268], [["CDKN2A(D)", "MDM4(A)", "RB1(D)"], 0.2063755004804134, 1.578057951642843], [["CDK4(A)", "EGFR", "PTEN"], 0.20825041652088203, 1.5690139978369113], [["PDGFRA(A)", "PTEN(D)", "RB1(D)"], 0.21408781162390528, 1.541369013433396], [["CDK4(A)", "PTEN(D)", "RB1(D)"], 0.23869270388140473, 1.432578312164811], [["PDGFRA(A)", "PTEN(D)", "TP53"], 0.24856776092634736, 1.392039790831735], [["CDKN2A(D)", "PDGFRA(A)", "PTEN"], 0.27820618352519644, 1.2793927728339982], [["MDM4(A)", "PDGFRA(A)", "TP53"], 0.2956692679380704, 1.21851378739266], [["PTEN(D)", "RB1(D)", "TP53"], 0.3061986667738007, 1.1835211498705778], [["CDKN2A(D)", "PDGFRA(A)", "RB1(D)"], 0.31956011274566254, 1.1408098765530417], [["CDK4(A)", "EGFR", "MDM4(A)"], 0.3235038813734994, 1.1285441670497904], [["CDKN2A(D)", "PTEN", "RB1(D)"], 0.4174671998657916, 0.8735493009731851], [["CDK4(A)", "EGFR", "TP53"], 0.44446021263170254, 0.8108947384243423], [["MDM4(A)", "PDGFRA(A)", "RB1(D)"], 0.4467950410523015, 0.8056553106573195], [["CDK4(A)", "MDM4(A)", "RB1(D)"], 0.4708793738296195, 0.7531533242854489], [["MDM4(A)", "RB1(D)", "TP53"], 0.4749546040382732, 0.7445360499603825], [["EGFR", "PDGFRA(A)", "TP53"], 0.5334610044778213, 0.6283693046740926], [["EGFR", "PDGFRA(A)", "PTEN"], 0.5334610044778227, 0.6283693046740899], [["MDM4(A)", "PDGFRA(A)", "PTEN(D)"], 0.5425689657626903, 0.611440075817482], [["EGFR", "MDM4(A)", "PTEN(D)"], 0.5820388188771575, 0.5412181343733403], [["CDKN2A(D)", "PTEN(D)", "RB1(D)"], 0.5946749466934698, 0.5197403307953388], [["CDK4(A)", "PTEN(D)", "TP53"], 0.6032590570018619, 0.5054085609106915], [["MDM4(A)", "PDGFRA(A)", "PTEN"], 0.6228221435100267, 0.47349428488552053], [["MDM4(A)", "PTEN", "TP53"], 0.6245621715130891, 0.4707044003074877], [["CDK4(A)", "MDM4(A)", "TP53"], 0.6554675794476115, 0.42240643627291097], [["MDM4(A)", "PTEN(D)", "RB1(D)"], 0.6787600562281955, 0.387487592037932], [["CDKN2A(D)", "MDM4(A)", "PTEN"], 0.6846537820131184, 0.3788419962096308], [["CDK4(A)", "PDGFRA(A)", "PTEN(D)"], 0.7087768233167336, 0.34421457870677913], [["CDKN2A(D)", "EGFR", "PDGFRA(A)"], 0.7177992357659753, 0.3315653649585599], [["CDK4(A)", "MDM4(A)", "PTEN(D)"], 0.7191403172842089, 0.3296987841343889], [["EGFR", "RB1(D)", "TP53"], 0.7376226933226347, 0.3043228407777877], [["EGFR", "MDM4(A)", "PTEN"], 0.740628430935035, 0.3002562221832477], [["CDK4(A)", "PDGFRA(A)", "RB1(D)"], 0.7593138057769138, 0.2753401406855023], [["CDKN2A(D)", "PTEN", "PTEN(D)"], 0.7763596141973244, 0.2531394457875924], [["PDGFRA(A)", "RB1(D)", "TP53"], 0.8028524291421747, 0.21958435634217627], [["CDK4(A)", "MDM4(A)", "PTEN"], 0.8297113759088722, 0.1866773785358505], [["CDKN2A(D)", "EGFR", "PTEN(D)"], 0.836409535803964, 0.178636910483606], [["CDKN2A(D)", "EGFR", "MDM4(A)"], 0.836409535803964, 0.178636910483606], [["CDKN2A(D)", "MDM4(A)", "PTEN(D)"], 0.8707006713824035, 0.1384570220643644], [["CDKN2A(D)", "PDGFRA(A)", "PTEN(D)"], 0.875904296568077, 0.1324984445070782], [["CDKN2A(D)", "MDM4(A)", "PDGFRA(A)"], 0.875904296568077, 0.1324984445070782], [["EGFR", "PTEN", "RB1(D)"], 0.8850274128263302, 0.12213665950891532], [["EGFR", "PTEN", "TP53"], 0.8875145604943715, 0.11933035157630516], [["CDK4(A)", "PTEN", "TP53"], 0.8893665710515088, 0.11724578756703904], [["CDK4(A)", "PDGFRA(A)", "PTEN"], 0.9100491203764695, 0.09425670249234396], [["CDK4(A)", "PTEN", "RB1(D)"], 0.9153847077246128, 0.08841085646843072], [["PTEN", "RB1(D)", "TP53"], 0.956919825704192, 0.044035667732280286], [["CDK4(A)", "MDM4(A)", "PDGFRA(A)"], 0.9594231352932965, 0.04142307586960934], [["CDK4(A)", "RB1(D)", "TP53"], 0.9637908174315368, 0.036881002283900885], [["PDGFRA(A)", "PTEN", "RB1(D)"], 0.9774027832411328, 0.022856446553316014], [["PDGFRA(A)", "PTEN", "TP53"], 0.9808389015614198, 0.019347051493948133], [["MDM4(A)", "PTEN", "RB1(D)"], 0.988868065552378, 0.011194358126417414], [["CDK4(A)", "PDGFRA(A)", "TP53"], 0.9892019032752759, 0.010856819281656233]]

	# Run CoMEt MCMC using a fixed seed
	seed = 23
	mcmcArgs = [ "-m", "../example_datasets/gbm/GBM.m2",  "-o", "tmp-mcmc",
				 "-g", "../example_datasets/gbm/GBM.glst", "-N", "10000",
				 "--seed", str(seed), "-mf", "30", "-ks", "3", "3"]
	mcmcResults = RC.run(RC.get_parser().parse_args(mcmcArgs))
        os.unlink("tmp-mcmc.para.k33.10.0K.1.json")
        os.unlink("tmp-mcmc.sum.k33.10.0K.1.tsv")
        
	# Run exhaustive
	exhaustArgs = ["-m", "../example_datasets/gbm/GBM.m2", "-o", "tmp",
				   "-g", "../example_datasets/gbm/GBM.glst", "-k", "3",
				   "-mf", "30"]
	exhaustResults = RE.run(RE.get_parser().parse_args(exhaustArgs))
        os.unlink("tmp-k3-exact-exhaustive.tsv")

	# Check the results
	assert(json.dumps(exhaustResults) == json.dumps(trueExhaustive))
	assert(json.dumps(mcmcResults) == json.dumps(trueMCMC))

	print "PASS"
